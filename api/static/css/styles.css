.layout {
    /* height: 100%;
    width: 100%; */
    display: grid;
    grid:
        "sidebar body" 1fr / auto 0.9fr;
    gap: 8px;
}


.container {  display: grid;
    grid-template-columns: .3fr 1fr;
    grid-template-rows: .1fr 1fr .1fr;
    gap: 0px 0px;
    grid-auto-flow: row;
    grid-template-areas:
      ". Title"
      "Sidebar Main-Content"
      ". .";
  }
  
  .Main-Content { grid-area: Main-Content; }
  

  
  .Title { grid-area: Title; }
  

.body {
    grid-area: body;
}

button {
    position: absolute;
    margin: 20px;
}

#pause::after {
    content: 'Pause';
}

#pause.pause::after {
    content: 'Play';
}


.sideBar {
    grid-area: Sidebar;
    /**
     * This container orders items according to flexbox
     * rules. By default, this would arrange its children
     * horizontally. However, the next property...
     */
    display: flex;

    /**
     * ...sets the main axis to be vertical instead of
     * horizontal, so now the children are laid out
     * vertically, from top to bottom.
     */
    flex-direction: column;

    /**
     * It will also put as much space as possible
     * between its children, with the children at either end
     * laying flush against the container's edges.
     */
    justify-content: space-between;
    height: 1vh;
    /* height: 300px;
    width: 150px; */
    border-right: 1px solid black;
    background-color: #FCFDFD;
    padding: 10px;
    top: 0;
    bottom: 0;
}

.sideBar__item {
    cursor: pointer;
    padding: 5px 10px;
    color: #16A2D7;
    font-size: 12px;
}

.sideBar__item.is-side-bar-item-selected {
    background-color: #EEF3F5;
    border-radius: 4px;
}



body {
    margin: 0;
    padding: 0;
}

#map {
    position: relative;
    height: 100%;
    width: 100%; 
}